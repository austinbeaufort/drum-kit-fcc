{"version":3,"sources":["Drumpad/Drumpad.js","percussion.js","App.js","serviceWorker.js","index.js"],"names":["Drumpad","react_default","a","createElement","key","this","props","willBeKey","onClick","click","className","id","src","url","audioId","textToShow","Component","percussion","innerText","keyCode","sound","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","display","handleClick","bind","assertThisInitialized","handleKeyPress","document","addEventListener","removeEventListener","e","getElementById","toUpperCase","play","newDisplay","parentElement","setState","target","_this2","drumpads","map","item","index","src_Drumpad_Drumpad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAsBeA,0LAjBT,OACEC,EAAAC,EAAAC,cAAA,OACEC,IAAKC,KAAKC,MAAMC,UAChBC,QAASH,KAAKC,MAAMG,MACpBC,UAAU,WACVC,GAAIN,KAAKC,MAAMK,IACfV,EAAAC,EAAAC,cAAA,SAAOS,IAAKP,KAAKC,MAAMO,IACrBF,GAAIN,KAAKC,MAAMQ,QACfJ,UAAU,SACXL,KAAKC,MAAMS,mBAZAC,cCuDLC,EAzDA,CACb,CACEC,UAAW,IACXC,QAAS,GACTR,GAAI,OACJS,MAAO,uGAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,QACJS,MAAO,iEAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,OACJS,MAAO,kGAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,eACJS,MAAO,kGAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,SACJS,MAAO,gGAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,cACJS,MAAO,0GAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,UACJS,MAAO,qGAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,SACJS,MAAO,sGAET,CACEF,UAAW,IACXC,QAAS,GACTR,GAAI,UACJS,MAAO,gGCuBEC,cArEb,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KAEDsB,MAAQ,CACXC,QAAS,oCAGXP,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IACnBA,EAAKW,eAAiBX,EAAKW,eAAeF,KAApBR,OAAAS,EAAA,EAAAT,CAAAD,IARLA,mFAYjBY,SAASC,iBAAiB,UAAW9B,KAAK4B,+DAG1CC,SAASE,oBAAoB,UAAW/B,KAAK4B,uDAGhCI,GACX,IAAIjB,EAAQc,SAASI,eAAeD,EAAEjC,IAAImC,eAC1CnB,EAAMoB,OACN,IAAIC,EAAarB,EAAMsB,cAAc/B,GACrCN,KAAKsC,SAAS,CACZd,QAASY,wCAIHJ,GAEV,IAAIjB,EAAQc,SAASI,eAAeD,EAAEO,OAAO1B,WAC7CE,EAAMoB,OACN,IAAIC,EAAarB,EAAMsB,cAAc/B,GACrCN,KAAKsC,SAAS,CACZd,QAASY,qCAKJ,IAAAI,EAAAxC,KACHyC,EAAW7B,EAAW8B,IAAI,SAACC,EAAMC,GACnC,OACEhD,EAAAC,EAAAC,cAAC+C,EAAD,CACE9C,IAAKa,EAAWgC,GAAOtC,GACvBF,MAAOoC,EAAKf,YACZvB,UAAWU,EAAWgC,GAAOtC,GAC7BA,GAAIM,EAAWgC,GAAOtC,GACtBE,IAAKI,EAAWgC,GAAO7B,MACvBN,QAASG,EAAWgC,GAAO/B,UAC3BH,WAAYE,EAAWgC,GAAO/B,cAIpC,OACEjB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,sBAAsBC,GAAG,gBACtCV,EAAAC,EAAAC,cAAA,KAAGQ,GAAG,WAAWN,KAAKuB,MAAMC,SAC5B5B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACdoC,WAzDS9B,aCMEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASxB,SAASI,eAAe,SD2H3C,kBAAmBqB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a743dee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Drumpad extends Component {\r\n\r\n    render() {\r\n      return (\r\n        <div \r\n          key={this.props.willBeKey}\r\n          onClick={this.props.click}\r\n          className=\"drum-pad\" \r\n          id={this.props.id}>\r\n          <audio src={this.props.url} \r\n            id={this.props.audioId} \r\n            className=\"clip\"></audio>\r\n          {this.props.textToShow}\r\n        </div>\r\n      )\r\n    }\r\n  \r\n  }\r\n\r\n\r\nexport default Drumpad;","let percussion = [\r\n    {\r\n      innerText: 'Q',\r\n      keyCode: 81,\r\n      id: 'bass',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/1/1/Beat%20Box%20Kick%203-3174-Free-Loops.com.mp3'\r\n    },\r\n    {\r\n      innerText: 'W',\r\n      keyCode: 87,\r\n      id: 'snare',\r\n      sound: 'http://s1download-universal-soundbank.com/mp3/sounds/4388.mp3'\r\n    },\r\n    {\r\n      innerText: 'E',\r\n      keyCode: 69,\r\n      id: 'clap',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/2/2/CR%20800%20Clap-20859-Free-Loops.com.mp3'\r\n    },\r\n    {\r\n      innerText: 'A',\r\n      keyCode: 65,\r\n      id: 'crash-cymbal',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/1/1/909%20Crash%2003-5820-Free-Loops.com.mp3'\r\n    },\r\n    {\r\n      innerText: 'S',\r\n      keyCode: 83,\r\n      id: 'hi-hat',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/1/1/707%20Hi%20Hat-1035-Free-Loops.com.mp3'\r\n    },\r\n    {\r\n      innerText: 'D',\r\n      keyCode: 68,\r\n      id: 'ride-cymbal',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/4/4/Korg%20Ride%20Cymbal%202-2526-Free-Loops.com.mp3'\r\n    },\r\n    {\r\n      innerText: 'Z',\r\n      keyCode: 90,\r\n      id: 'low-tom',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/2/2/CR%20800%20Tom.wav-20922-Free-Loops.com.mp3'\r\n    },\r\n    {\r\n      innerText: 'X',\r\n      keyCode: 88,\r\n      id: 'hi-tom',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/1/1/909%20Mid%20Tom.wav-21921-Free-Loops.com.mp3'\r\n    },\r\n    {\r\n      innerText: 'C',\r\n      keyCode: 67,\r\n      id: 'cowbell',\r\n      sound: 'http://dight310.byu.edu/media/audio/FreeLoops.com/2/2/Cowbell%20Hit-8994-Free-Loops.com.mp3'\r\n    },\r\n  ]\r\n\r\n  export default percussion;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Drumpad from './Drumpad/Drumpad';\nimport percussion from './percussion';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      display: 'Use Keys, Click, or Tap to Play!'\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  handleKeyPress(e) {\n      let sound = document.getElementById(e.key.toUpperCase());\n      sound.play();\n      let newDisplay = sound.parentElement.id;\n      this.setState({\n        display: newDisplay\n      });\n  }\n\n  handleClick(e) {\n    // console.log(e.target.innerText);\n    let sound = document.getElementById(e.target.innerText);\n    sound.play();\n    let newDisplay = sound.parentElement.id;\n    this.setState({\n      display: newDisplay\n    })\n  }\n\n\n  render() {\n    let drumpads = percussion.map((item, index) => {\n      return (\n        <Drumpad \n          key={percussion[index].id}\n          click={this.handleClick}\n          willBeKey={percussion[index].id}\n          id={percussion[index].id}\n          url={percussion[index].sound}\n          audioId={percussion[index].innerText}\n          textToShow={percussion[index].innerText}/>\n      )\n    })\n\n    return (\n      <div className=\"App inner-container\" id=\"drum-machine\">\n        <p id=\"display\">{this.state.display}</p>\n        <div className=\"pad-array\">\n        {drumpads}\n        </div>\n      </div>\n\n    );\n  }\n}\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}